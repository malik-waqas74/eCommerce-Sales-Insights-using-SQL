CREATE DATABASE eCommerce_sales

use eCommerce_sales


/**Basic Queries
1. List all unique cities where customers are located.
2. Count the number of orders placed in 2017.
3. Find the total sales per category.
4.... Calculate the percentage of orders that were paid in installments.
5. Count the number of customers from each state. **/

/*Unique Cities*/
SELECT distinct customer_city as Customer_Cities
FROM customers
/* Orders in 2017*/
SELECT COUNT(order_id) as Total_Orders_in_2017
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017
/* Sales by Category */
SELECT product_category,
ROUND(SUM(payments.payment_value),2) as Total_Sales
FROM 
products inner join order_items
on 
order_items.product_id = products.product_id
inner join payments on 
payments.order_id = order_items.order_id
group by product_category
select * from payments

/* Installements Percentage */
SELECT 
(COUNT(CASE WHEN payment_installments>=1 then payments.order_id end)*100.0)/
COUNT(payments.order_id) as Percentage
FROM 
payments
inner join orders 
on orders.order_id = payments.order_id

/* Customers from each State */
SELECT COUNT(distinct customer_id) as Total_Customers, customer_state
FROM customers
group by customer_state
order by customer_state


/**Intermediate Queries
1. Calculate the number of orders per month in 2018.
2. Find the average number of products per order, grouped by customer city.
3. Calculate the percentage of total revenue contributed by each product category.
4. Identify the correlation between product price and the number of times a product has been purchased.
5. Calculate the total revenue generated by each seller, and rank them by revenue.
**/

-- Extract the number of orders in each month of 2018
SELECT COUNT(order_id) as total_orders,
DATENAME(MONTH,order_purchase_timestamp) as Months
from orders
WHERE YEAR(order_purchase_timestamp)=2018
group by DATENAME(MONTH,order_purchase_timestamp)

--Average Number of products per order grouped by 
-- customer city --working
with all_Orders AS(
SELECT orders.order_id,orders.customer_id as cust_id,
count(order_items.order_id) as order_count
FROM orders
inner join order_items on 
order_items.order_id = orders.order_id
group by orders.order_id,orders.customer_id)

SELECT
customers.customer_city,
avg(all_Orders.order_count) as Average_orders
from customers
inner join all_Orders on
all_Orders.cust_id = customers.customer_id
group by customer_city
order by Average_orders desc

--Corelation b/w product price and number of times product sold
SELECT 
products.product_category,
COUNT(order_items.product_id) as Order_Count,
round(avg(order_items.price),2) as Avg_Price
FROM order_items
inner join products on 
products.product_id = order_items.product_id
group by product_category

--Percentage in revenue by each product_category

SELECT products.product_category,
(SUM(payment_value))  /
(SELECT (SUM(payment_value)) as Total_Revenue
	from payments)*100 as Total_Sales
FROM products
inner join order_items on
order_items.product_id = products.product_id
inner join payments on 
payments.order_id = order_items.order_id
group by product_category
ORDER BY Total_Sales desc


-- Revenue Generated by Each Seller
SELECT ROUND(SUM(payment_value),2) as Total_Revenue,
sellers.seller_id
from payments
inner join order_items
on order_items.order_id = payments.order_id
inner join sellers on
sellers.seller_id = order_items.seller_id
 group by sellers.seller_id
 order by Total_Revenue desc


/*Advanced Queries
1. Calculate the moving average of order values for each customer over their order history.
2. Calculate the cumulative sales per month for each year.
3. Calculate the year-over-year growth rate of total sales.
4. Calculate the retention rate of customers, defined as the percentage of customers
-- who make another purchase within 6 months of their first purchase.
5. Identify the top 3 customers who spent the most money in each year.
*/


/*Moving Average of a customer*/
SELECT customer_id,order_purchase_timestamp,
avg(payment) over(partition by customer_id order by 
	order_purchase_timestamp
	rows between 2 preceding and current row) as mov_avg,Payment
from

(SELECT 
orders.customer_id , orders.order_purchase_timestamp,
payments.payment_value as Payment
FROM payments inner join orders
on
payments.order_id =  orders.order_id) as a;

/* 
Calculate the cumulative sales per month for each year.*/

SELECT Years, Month_Number,Total_Sales, Sum(Total_Sales) over (order by Years,Month_Number) Cum_Sales 
FROM 
(SELECT
DATENAME(YEAR,orders.order_purchase_timestamp) as Years,
DATEPART(MONTH,orders.order_purchase_timestamp) as Month_Number,
round(sum(payments.payment_value),2) as Total_Sales
from orders
join payments on 
orders.order_id = payments.order_id
group by 
DATENAME(YEAR,orders.order_purchase_timestamp),
DATEPART(MONTH,orders.order_purchase_timestamp) 
)as Sales;

/*Calculate the year-over-year growth rate of total sales.*/
--lag function : it is used to compare the rows value with previous..
SELECT Years,
(((Total_Sales - lag(Total_Sales,1) over
(order by Years))/
lag(Total_Sales,1) over (order by Years) * 100)) as '%Growth',Total_Sales

from 
(SELECT DATENAME(YEAR,orders.order_purchase_timestamp) as Years,
round(sum(payments.payment_value),2)as Total_Sales
from orders
inner join payments
on
payments.order_id = orders.order_id
group by DATENAME(YEAR,orders.order_purchase_timestamp)) as Sales;


/*Calculate the retention rate of customers,
defined as the percentage of customers
-- who make another purchase within 6 months
of their first purchase.*/


WITH First_Order_Customer as(
SELECT
customers.customer_id,
MIN(orders.order_purchase_timestamp) as first_Order
FROM customers
inner join orders on
orders.customer_id = customers.customer_id
group by customers.customer_id),

Second_Order as (SELECT First_Order_Customer.customer_id,
COUNT(distinct order_purchase_timestamp) as returned_order
FROM First_Order_Customer
inner join orders
on 
orders.customer_id =  First_Order_Customer.customer_id
and orders.order_purchase_timestamp > first_Order
and orders.order_purchase_timestamp< DATEADD(MONTH,6,first_Order)
group by First_Order_Customer.customer_id)

SELECT
  CASE WHEN COUNT(Second_Order.customer_id) = 0  THEN
    NULL
  ELSE
    100 * COUNT(First_Order_Customer.customer_id) /(COUNT(Second_Order.customer_id))
  END AS percentage_customers
FROM
  First_Order_Customer
LEFT JOIN Second_Order
  ON First_Order_Customer.customer_id = Second_Order.customer_id;

/* Identify the top 3 customers
who spent most money in 3 years.*/


WITH allRanked as(
SELECT 
YEAR(orders.order_purchase_timestamp) as years,
orders.customer_id as customer_id,
sum(payments.payment_value)as Paid_Price,
DENSE_RANK() OVER(PARTITION BY YEAR(orders.order_purchase_timestamp)
order by sum(payments.payment_value) desc) as Rank_number
FROM orders
inner join payments on
payments.order_id = orders.order_id 
group by YEAR(orders.order_purchase_timestamp),orders.customer_id
)


SELECT years,customer_id, Paid_Price,Rank_number
FROM allRanked
where Rank_number<4
















